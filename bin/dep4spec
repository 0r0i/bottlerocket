#!/bin/bash

set -euo pipefail

for opt in "$@"; do
   optarg="$(expr "${opt}" : '[^=]*=\(.*\)')"
   case "${opt}" in
      --spec=*) SPEC="${optarg}" ;;
      --arch=*) ARCH="${optarg}" ;;
   esac
done

DIR="${SPEC%/*}"
PKG="${SPEC##*/}"
PKG="${PKG%.*}"

MACROS="/usr/lib/rpm/macros:macros/${ARCH}:macros/shared:macros/rust:macros/cargo"
RPMSPEC=("rpmspec" "--macros" "${MACROS}" "--define" "_sourcedir packages/${PKG}")

# For now we only support putting source-level dependencies in place.
# TODO: extend this to also deal with moving blobs around for third-party
# packages, since that's super painful right now.

if [ -s "workspaces/${PKG}/Cargo.toml" ]; then
    PROJECT="workspaces/${PKG}"

    FILES="$(git ls-files ${PROJECT} | tr '\n' ' ')"
    CRATE="${PKG}.crate"

    # Build the initial crate to satisfy the other dependency generators.
    tar czf ${DIR}/${CRATE} --transform="s,${PROJECT},${PKG}," ${FILES}

    # Emit a rule to rebuild the crate if its dependencies change.
    echo "${DIR}/${CRATE} : ${FILES}"
    echo -e "\t@tar czf \$@ --transform='s,${PROJECT},${PKG},' ${FILES}"
fi

if [[ -f "packages/${PKG}/sources" ]]; then
    for source_num in $(sed -n 's/%cargo_bundle_crates .*-t\s\+\([0-9]\+\)/\1/p' "${SPEC}"); do
        # %cargo_bundle_crates references a source that we might need to download
        # before it can run properly, so let's check that and fetch the source.
        URL="$("${RPMSPEC[@]}" --parse "${SPEC}" | awk "/^Source${source_num}:/ {print \$NF}")"
        if [[ "$URL" =~ ^https?:// ]]; then
            FILENAME="${URL##*/}"
            CHECKSUM="$(awk -v pattern="^[(]${FILENAME}[)]$" '$2 ~ pattern {print $4}' "packages/${PKG}/sources")"
            bin/fetch-upstream "${URL}" "packages/${PKG}/${FILENAME}" "${CHECKSUM}" 1>&2
        fi
    done
fi
