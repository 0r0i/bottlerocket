#!/bin/bash

set -eu -o pipefail
shopt -qs failglob

for opt in "$@"; do
   optarg="$(expr "${opt}" : '[^=]*=\(.*\)')"
   case "${opt}" in
      --disk-image-name=*) DISK_IMAGE_NAME="${optarg}" ;;
      --boot-image-name=*) BOOT_IMAGE_NAME="${optarg}" ;;
      --root-image-name=*) ROOT_IMAGE_NAME="${optarg}" ;;
      --package-dir=*) PACKAGE_DIR="${optarg}" ;;
      --output-dir=*) OUTPUT_DIR="${optarg}" ;;
   esac
done

mkdir -p "${OUTPUT_DIR}"
rm -f "${OUTPUT_DIR}/${DISK_IMAGE_NAME}" "${OUTPUT_DIR}/${BOOT_IMAGE_NAME}" "${OUTPUT_DIR}/${ROOT_IMAGE_NAME}"

DISK_IMAGE="$(mktemp)"
BOOT_IMAGE="$(mktemp)"
ROOT_IMAGE="$(mktemp)"
DATA_IMAGE="$(mktemp)"
ROOT_MOUNT="/mnt/root"

# Define a partition type GUID for the Thar boot partition. GPT specifies
# use of the "GUID specific use" bits (where gptprio works) depend on the
# partition type GUID.
THAR_BOOT_TYPECODE="6b636168-7420-6568-2070-6c616e657421"
# Define a type GUID for the dm-verity hashes because nobody's really settled
# on a standard one.
THAR_VERITY_TYPECODE="598f10af-c955-4456-6a99-7720068a6cea"
# This partition UUID is referenced in var-lib-thar.mount
THAR_DATA_PARTUUID="b9be5c1d-18f9-4f76-afe0-1119a3b1bbf6"

truncate -s 2G "${DISK_IMAGE}"
# partition 2 attributes: 48 = gptprio priority bit; 56 = gptprio successful bit
sgdisk --clear \
   -n 1:2048:4095 -c 1:"BIOS-BOOT" -t 1:ef02 \
   -n 2:4096:45055 -c 2:"THAR-BOOT-A" -t 2:"${THAR_BOOT_TYPECODE}" -A 2:set:48 -A 2:set:56 \
   -n 3:45056:53247 -c 3:"THAR-VERITY-A" -t 3:"${THAR_VERITY_TYPECODE}" \
   -n 4:53248:1050623 -c 4:"THAR-ROOT-A" -t 4:8300 \
   -n 5:1050624:1091583 -c 5:"THAR-BOOT-B" -t 5:"${THAR_BOOT_TYPECODE}" -A 5:clear:48 -A 5:clear:56 \
   -n 6:1091584:1099775 -c 6:"THAR-VERITY-B" -t 6:"${THAR_VERITY_TYPECODE}" \
   -n 7:1099776:2097151 -c 7:"THAR-ROOT-B" -t 7:8300 \
   -n 8:2097152:$((2048*2048-2048)) -c 8:"THAR-DATA" -t 8:8300 -u 8:"${THAR_DATA_PARTUUID}" \
   --print "${DISK_IMAGE}"

mkdir -p "${ROOT_MOUNT}"
rpm -iv --root "${ROOT_MOUNT}" "${PACKAGE_DIR}"/*.rpm
rm -rf "${ROOT_MOUNT}"/var/lib

# MBR and BIOS-BOOT
echo "(hd0) ${DISK_IMAGE}" > ${ROOT_MOUNT}/boot/grub/device.map
"${ROOT_MOUNT}/sbin/grub-bios-setup" \
  --directory="${ROOT_MOUNT}/boot/grub" \
  --device-map="${ROOT_MOUNT}/boot/grub/device.map" \
  --root="hd0" \
  --skip-fs-probe \
  ${DISK_IMAGE}

rm -f "${ROOT_MOUNT}/boot/grub/*" "${ROOT_MOUNT}/sbin/grub*"

# Now that we're done messing with /, move /boot out of it
BOOT_MOUNT="/mnt/boot"
mkdir "${BOOT_MOUNT}"
mv "${ROOT_MOUNT}/boot"/* "${BOOT_MOUNT}"

# THAR-ROOT-A
mkfs.ext4 -O ^has_journal -d "${ROOT_MOUNT}" "${ROOT_IMAGE}" 487M
dd if="${ROOT_IMAGE}" of="${DISK_IMAGE}" conv=notrunc bs=512 seek=53248

# write GRUB config
cat <<EOF > ${BOOT_MOUNT}/grub/grub.cfg
set default="0"
set timeout="0"

menuentry "Thar" {
   linux (\$root)/vmlinuz root=PARTUUID=\$boot_uuid/PARTNROFF=2 ro console=tty0 console=ttyS0 systemd.log_target=console audit=0 init=/sbin/preinit
}
EOF

# THAR-BOOT-A
mkfs.ext4 -O ^has_journal -d "${BOOT_MOUNT}" "${BOOT_IMAGE}" 20M
dd if="${BOOT_IMAGE}" of="${DISK_IMAGE}" conv=notrunc bs=512 seek=4096

# THAR-DATA
mkfs.ext4 "${DATA_IMAGE}" 1023M
dd if="${DATA_IMAGE}" of="${DISK_IMAGE}" conv=notrunc,sparse bs=512 seek=2097152

sgdisk -v "${DISK_IMAGE}"

mv "${DISK_IMAGE}" "${OUTPUT_DIR}/${DISK_IMAGE_NAME}"
lz4 -9vc "${BOOT_IMAGE}" >"${OUTPUT_DIR}/${BOOT_IMAGE_NAME}"
lz4 -9vc "${ROOT_IMAGE}" >"${OUTPUT_DIR}/${ROOT_IMAGE_NAME}"
chown 1000:1000 "${OUTPUT_DIR}/${DISK_IMAGE_NAME}" "${OUTPUT_DIR}/${BOOT_IMAGE_NAME}" "${OUTPUT_DIR}/${ROOT_IMAGE_NAME}"
